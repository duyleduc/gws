#!/usr/bin/env bash

GWS_PROPS_FILE_NAME='.projects.gws'
root_directory="$(pwd)"

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

######################################################################
# Common functions #
######################################################################
usage() {
    echo "Usage: $0 {init|update [--global|--current]}"
    exit 1
}

# Function to log messages with different levels
log() {
    local log_level="$1"
    local message="$2"
    local color="${NC}" # Default color

    case "$log_level" in
    "error")
        color="$RED"
        ;;
    "warning")
        color="$YELLOW"
        ;;
    "info")
        color="$BLUE"
        ;;
    *)
        echo "${message}"
        return 0
        ;;
    esac

    echo -e "${color}[${log_level^^}] ${message}${NC}"
}

is_git_project() {
    local target_dir="$1"

    # Check if the target directory exists
    if [ ! -d "$target_dir" ]; then
        log "error" "Directory '$target_dir' not found."
        return 1
    fi

    # Log info message
    log "info" "Scanning directory: $target_dir"

    # Find all Git repositories in the target directory and its subdirectories
    find "$target_dir" -type d -name .git | while read -r git_dir; do
        project_dir=$(dirname "$git_dir")
        project_name=$(basename "$project_dir")
        git_repo=$(cd "$project_dir" && git config --get remote.origin.url)

        if [ -n "$git_repo" ]; then
            log "info" "Project at $project_dir is a Git project."
        else
            log "error" "Folder $project_dir is not properly configured as a Git project."
        fi
    done
}

check_file_in_parents() {
    local current_dir="$1"
    
    while [[ "$current_dir" != "/" && "$current_dir" != "." ]]; do
        if [[ -f "$current_dir/.projects.gws" ]]; then
            projects_gws_file_location="$current_dir"
            echo "${projects_gws_file_location}"
            return 0
        fi
        current_dir="$(dirname "$current_dir")"
    done

    log "error" "You are not in a git workspaces"
    return 1
}

# Function to find all Git repositories inside a directory
find_git_repos() {
    local dir=$1
    local repos=()

    # Use find command to locate all .git directories
    find "$dir" -type d -name ".git" -print0 | while IFS= read -r -d '' repo; do
        # Remove the "/.git" suffix from the directory path
        repo=${repo%/.git}

        # Determine project_name (relative path from root_directory)
        project_name=${repo%"${repo##*[!/]}"}
        project_name=${project_name#"$dir"}
        project_name=${project_name#/}

        remote_url=$(git -C "$repo" config --get remote.origin.url)

        # Check if remote_url is empty
        if [ -n "$remote_url" ]; then
            # Add to repos array
            echo "${project_name} ${remote_url}" >>"${root_directory}/${GWS_PROPS_FILE_NAME}"
        else
            log "warning" "Project ${project_name} is not alreay created on remote"
        fi

    done
}

# Function to read file and save lines to an array
read_file() {
    local file=$1
    if [[ ! -f $file ]]; then
        echo "File not found: $file"
        exit 1
    fi

    local lines=()
    while IFS= read -r line; do
        # Skip empty lines and lines starting with #
        if [[ -n $line && ! $line =~ ^# ]]; then
            lines+=("$line")
        fi
    done < "$file"

    # Return the lines array
    echo "${lines[@]}"
}

is_git_repo() {
    local project_location=$1
    if [ -d "$1/.git" ]; then
        return 0
    else
        return 1
    fi
}

iterate_projects_and_execute() {
    local file=$1
    local gws_file_location=$2
    local operation=$3

    # Read the projects into an array
    IFS=' ' read -r -a projects <<< "$(read_file $file)"

    # Iterate over the projects array and process each pair
    for (( i=0; i<${#projects[@]}; i+=2 )); do
        local project="${projects[i]}"
        local repo="${projects[i+1]}"

        $operation "$project" "$repo" "$gws_file_location"
    done
}

######################################################################
# End of common functions
######################################################################


######################################################################
# Specific git command functions
######################################################################

# Function to clone a project if it's not already a Git repository
clone_project() {
    set +e
    local project_location=$1
    local project_repo=$2
    local gws_location=$3

    is_git_repo "${gws_location}/${project_location}"
    if [[ $? -eq 1 ]]; then
        log "info" "Start cloning $project_repo at ${gws_location}/${project_location}"
        git clone "$project_repo" "${gws_location}/${project_location}"
        log "info" "Finish cloning $project_repo"
    else
        log "info" "$project_location is already a Git repository"
    fi
    set -e
}


_update() {
    local gws_file_loc=$(check_file_in_parents ${root_directory})
    if [[ gws_file_loc ]]; then
        log "info" "You current gws config is at ${gws_file_loc}"
        iterate_projects_and_execute "${gws_file_loc}/${GWS_PROPS_FILE_NAME}" "$gws_file_loc" clone_project
    else
        log "error" "Not in a Git workspace"
        exit 1
    fi
}

_init() {
    if [ -f "$GWS_PROPS_FILE_NAME" ]; then
        log "error" "Git workspaces already setup"
        return 1
    fi
    find_git_repos "$root_directory"
}

if [ $# -eq 0 ]; then
    usage
fi

case $1 in
    init)
        _init
        ;;
    update)
        _update $2
        ;;
    *)
        usage
        ;;
esac


